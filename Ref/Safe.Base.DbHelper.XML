<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Safe.Base.DbHelper</name>
    </assembly>
    <members>
        <member name="M:Safe.Base.DbHelper.Helper.AbsCPar.GetParameName">
            <summary>
            取得参数名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.DbHelper.Helper.AbsCPar.GetParameName(System.String)">
            <summary>
            取得参数
            </summary>
            <param name="par">前缀，主要是用于UPDATE语句时，可能出现两个参数相同的情况</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.DbHelper.Helper.AbsCPar.ToString">
            <summary>
            拼接成语句段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.DbHelper.Helper.AbsCPar.ToString(System.String)">
            <summary>
            拼接成语句段
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.DbHelper.Helper.AbsCPar.GetDataParameter">
            <summary>
            取得该项对应的参数集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.DbHelper.Helper.AbsCPar.GetDataParameter(System.String)">
            <summary>
            取得该项对应的参数 
            </summary>
            <param name="pre">前缀，一般用于更新语句时，防止参数冲突</param>
            <returns></returns>
        </member>
        <member name="P:Safe.Base.DbHelper.Helper.AbsCPar.ParameType">
            <summary>
            参数的类型： 即前缀， MsSql下 ，该值为: "@"   MySql 下，该值为 “?”
            </summary>
        </member>
        <member name="P:Safe.Base.DbHelper.Helper.AbsCPar.Suffix">
            <summary>
            参数名修正，防止重名
            </summary>
        </member>
        <member name="M:Safe.Base.DbHelper.Helper.IDbHelperExtend.DoInsert(Safe.Base.Contract.IDbHelper,System.String,System.Collections.Generic.IEnumerable{Safe.Base.DbHelper.Helper.AbsCPar})">
            <summary>
            插入，同时返回受影响的行数
            </summary>
            <param name="dbo"></param>
            <param name="tableName"></param>
            <param name="dataPars"></param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.DbHelper.Helper.IDbHelperExtend.DoDelete(Safe.Base.Contract.IDbHelper,System.String,Safe.Base.DbHelper.Helper.AbsCPar[])">
            <summary>
            删除，同时返回受影响的行数
            </summary>
            <param name="tableName"></param>
            <param name="keyValue"></param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.DbHelper.Helper.IDbHelperExtend.DoUpdate(Safe.Base.Contract.IDbHelper,System.String,Safe.Base.DbHelper.Helper.AbsCPar[],Safe.Base.DbHelper.Helper.AbsCPar[])">
            <summary>
            更新，同时返回受影响的行数
            </summary>
            <param name="dbo"></param>
            <param name="tableName"></param>
            <param name="keyValue"></param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.DbHelper.Helper.IDbHelperExtend.DoSelectFillDataSet(Safe.Base.Contract.IDbHelper,System.String,System.String,System.String,Safe.Base.DbHelper.Helper.AbsCPar[])">
            <summary>
            查询语句，仅支持AND条件
            </summary>
            <param name="dbo"></param>
            <param name="tableName"></param>
            <param name="keyValue"></param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.DbHelper.Helper.IDbHelperExtend.DoSelectFillDataTable(Safe.Base.Contract.IDbHelper,System.String,System.String,System.String,Safe.Base.DbHelper.Helper.AbsCPar[])">
            <summary>
            查询语句，仅支持AND条件
            </summary>
            <param name="dbo"></param>
            <param name="tableName"></param>
            <param name="keyValue"></param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.DbHelper.Helper.IDbHelperExtend.DoSelect``1(Safe.Base.Contract.IDbHelper,System.String,System.String,System.String,Safe.Base.DbHelper.Helper.AbsCPar[])">
            <summary>
            查询，填充到集合，仅支持AND条件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbo"></param>
            <param name="tableName"></param>
            <param name="serachField"></param>
            <param name="orderby"></param>
            <param name="keyValue"></param>
            <returns></returns>
        </member>
        <member name="T:Safe.Base.Utility.ModelConvertHelper`1">
            <summary>
            用于快速转换数据库对象.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Safe.Base.Utility.ModelConvertHelper`1.ToModels(System.Data.DataTable)">
            <summary>
            将DataTable 转为Model, 如果DATATABLE为空，返回Null
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Utility.ModelConvertHelper`1.ToModels(System.Data.IDataReader)">
            <summary>
            将DataReader读取的内容转为Model，结束后不会自动关闭Reader
            </summary>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Utility.ModelConvertHelper`1.ToModel(System.Data.DataRow)">
            <summary>
            将DataRow读取到的一行 转为 Model
            </summary>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Utility.ModelConvertHelper`1.ToModel(System.Data.IDataRecord)">
            <summary>
            将 SqlDataReader 转为Model, 如果 SqlDataReader.read() 有值 ，返回对象，否则返回Null
            </summary>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="T:Safe.Base.Contract.IDbHelper">
            <summary>
            数据库访问
            </summary>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.EndConnection">
            <summary>
            断开数据库连接
            </summary>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.EndConnection(Safe.Base.Contract.ECloseTransactionType)">
            <summary>
            断开数据库连接
            </summary>
            <param name="closeTransactionType"></param>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.SetHandClose(System.Boolean)">
            <summary>
            设置为手动关闭连接
            </summary>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.SetCommandTimeOut(System.TimeSpan)">
            <summary>
            设置命令的超时时间
            </summary>
            <param name="timeOutSpan"></param>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.TryConnection">
            <summary>
            尝试连接数据库,默认尝试3秒(超时时间)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.TryConnection(System.TimeSpan)">
            <summary>
            尝试连接数据库,可指定超时时间
            </summary>
            <param name="timeOutSpan">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.ExecuteFillDataSet(System.String,System.Data.IDataParameter[])">
            <summary>
            执行语句返回DataSet
            </summary>
            <param name="commandText">查询语句</param>
            <param name="dataParameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.ExecuteFillDataSet(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            执行语句返回DataSet
            </summary>
            <param name="commandText">查询语句</param>
            <param name="cmdType">命令类型</param>
            <param name="dataParameters">参数集</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.ExecuteFillDataSet(System.String,System.Data.CommandType,System.Boolean,System.Data.IDataParameter[])">
            <summary>
            执行语句返回DataSet
            </summary>
            <param name="commandText">查询语句</param>
            <param name="cmdType">命令类型</param>
            <param name="withTransaction">是否开启事务</param>
            <param name="dataParameters">参数集</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.ExecuteFillDataTable(System.String,System.Data.IDataParameter[])">
            <summary>
            执行语句返回DataTable
            </summary>
            <param name="commandText">查询语句</param>
            <param name="dataParameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.ExecuteFillDataTable(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            执行语句返回DataTable
            </summary>
            <param name="commandText">查询语句</param>
            <param name="cmdType">命令类型</param>
            <param name="dataParameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.ExecuteFillDataTable(System.String,System.Data.CommandType,System.Boolean,System.Data.IDataParameter[])">
            <summary>
            执行语句返回DataTable
            </summary>
            <param name="commandText">查询语句</param>
            <param name="cmdType">命令类型</param>
            <param name="withTransaction">是否开启事务</param>
            <param name="dataParameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.ExecuteNonQuery(System.String,System.Data.IDataParameter[])">
            <summary>
            执行语句返回受影响的行数
            </summary>
            <param name="commandText">查询语句</param>
            <param name="dataParameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            执行语句返回受影响的行数
            </summary>
            <param name="commandText">查询语句</param>
            <param name="cmdType">命令类型</param>
            <param name="dataParameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Boolean,System.Data.IDataParameter[])">
            <summary>
            执行语句返回受影响的行数
            </summary>
            <param name="commandText">查询语句</param>
            <param name="cmdType">命令类型</param>
            <param name="withTransaction">是否开启事务</param>
            <param name="dataParameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.ExecuteProc(System.String,System.Boolean,System.Data.IDataParameter[])">
            <summary>
            执行存储过程,取得返回值以及输出值！如果需要事务，请在数据库中定义。
            </summary>
            <param name="commandText">存储过程名称</param>
            <param name="userDefalutOutPar">是否附加一个默认的输出值, 参数名称为@returnvalue, 为true时,请确保存储过程中已经定义了 @returnvalue nvarchar(256) out</param>
            <param name="dataParameters">参数集, 包含输出参数,但不包含返回值的参数</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.ExecuteProc(System.String,System.Boolean,System.Boolean,System.Boolean,System.Data.IDataParameter[])">
            <summary>
            执行存储过程,取得返回值以及输出值
            </summary>
            <param name="commandText">存储过程名称</param>
            <param name="userDefalutOutPar">是否附加一个默认的输出值, 参数名称为@returnvalue, 为true时,请确保存储过程中已经定义了 @returnvalue nvarchar(256) out</param>
            <param name="isProcContainTran">存储过程中是否已经创建了事务</param>
            <param name="dataParameters">参数集, 包含输出参数,但不包含返回值的参数</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.ExecuteReader(System.String,System.Data.IDataParameter[])">
            <summary>
            执行语句返回SqlDataReader，SqlDataReader关闭时，Conn会自动关闭
            </summary>
            <param name="commandText">查询语句</param>
            <param name="dataParameters">参数集</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.ExecuteReader(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            执行语句返回IDataReader，IDataReader关闭时，Conn会自动关闭
            </summary>
            <param name="commandText">查询语句</param>
            <param name="cmdType">命令类型</param>
            <param name="dataParameters">参数集</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.ExecuteReader(System.String,System.Data.CommandType,System.Boolean,System.Data.IDataParameter[])">
            <summary>
            执行语句返回IDataReader，IDataReader关闭时，Conn会自动关闭
            </summary>
            <param name="commandText">查询语句</param>
            <param name="cmdType">命令类型</param>
            <param name="withTransaction">是否开启程序事务</param>
            <param name="dataParameters">参数集</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.ExecuteScalar(System.String,System.Data.IDataParameter[])">
            <summary>
            执行语句返回第一行第一列
            </summary>
            <param name="commandText">查询语句</param>
            <param name="dataParameters">参数集</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            执行语句返回第一行第一列
            </summary>
            <param name="commandText">查询语句</param>
            <param name="cmdType">命令类型</param>
            <param name="dataParameters">参数集</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Boolean,System.Data.IDataParameter[])">
            <summary>
            执行语句返回第一行第一列
            </summary>
            <param name="commandText">查询语句</param>
            <param name="cmdType">命令类型</param>
            <param name="withTransaction">是否开启程序中的事务</param>
            <param name="dataParameters">参数集</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.Exists(System.String,System.Data.IDataParameter[])">
            <summary>
            以DataReader能否取到一行的方式判断是否存在一条记录
            </summary>
            <param name="commandText">查询语句</param>
            <param name="dataParameters">参数集</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Contract.IDbHelper.GetMaxId(System.String,System.String)">
            <summary>
            取得表中中最大ID
            </summary>
            <param name="tableName">表名</param>
            <param name="fieldName">表示ID的字段名</param>
            <returns></returns>
        </member>
        <member name="P:Safe.Base.Contract.CommandResult.NonQuery">
            <summary>
            执行存储过程结果中 受影响的行数
            </summary>
        </member>
        <member name="P:Safe.Base.Contract.CommandResult.ReturnValue">
            <summary>
            执行存储过程结果中 接收到的返回值
            </summary>
        </member>
        <member name="P:Safe.Base.Contract.CommandResult.OutPutValue">
            <summary>
            执行存储过程结果中 输出的值,键区分大小写！
            </summary>
        </member>
        <member name="M:Safe.Base.Contract.ZSQLCStatic.CheckText(System.String)">
            <summary>
            检查语句是否存在异常
            </summary>
            <param name="sqltext"></param>
        </member>
        <member name="T:Safe.Base.Contract.ISimplePager">
            <summary>
            简单的分页语句生成
            </summary>
        </member>
        <member name="M:Safe.Base.Contract.ISimplePager.GetCountSQL(System.String)">
            <summary>
            取得获取记录数的查询语句
            </summary>
            <param name="where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.Contract.ISimplePager.GetPagerSQL(System.Int32,System.Int32,System.String,System.String,Safe.Base.Contract.SimplePager_Order)">
            <summary>
            取得分页的查询语句
            </summary>
            <param name="pageindex">页码</param>
            <param name="pagesize">页大小</param>
            <param name="fields">查询字段</param>
            <param name="where">查询条件</param>
            <param name="order">排序</param>
            <returns></returns>
        </member>
        <member name="F:Safe.Base.DbHelper.MYSQLHelper._commandTimeout">
            <summary>
            命令的超时时间
            </summary>
        </member>
        <member name="F:Safe.Base.DbHelper.MYSQLHelper._connString">
            <summary>
            连接字串
            </summary>
        </member>
        <member name="F:Safe.Base.DbHelper.MYSQLHelper._conn">
            <summary>
            连接对象
            </summary>
        </member>
        <member name="F:Safe.Base.DbHelper.MYSQLHelper._dbTran">
            <summary>
            事务
            </summary>
        </member>
        <member name="F:Safe.Base.DbHelper.MYSQLHelper._isErr">
            <summary>
            在事务执行过程中,是否出现异常
            </summary>
        </member>
        <member name="F:Safe.Base.DbHelper.MYSQLHelper._canSetHandClose">
            <summary>
            能否设置手动关闭连接
            </summary>
        </member>
        <member name="F:Safe.Base.DbHelper.MYSQLHelper._autoClose">
            <summary>
            是否自动关闭连接
            </summary>
        </member>
        <member name="F:Safe.Base.DbHelper.MYSQLHelper._openTranWhenHandClose">
            <summary>
            手动关闭连接的情况下,是否需要开启数据库事务
            </summary>
        </member>
        <member name="M:Safe.Base.DbHelper.MYSQLHelper.TryEndConnection">
            <summary>
            尝试关闭连接,如果服务器有设置自动关闭,就自动关闭
            </summary>
        </member>
        <member name="M:Safe.Base.DbHelper.MYSQLHelper.CloseTransaction(Safe.Base.Contract.ECloseTransactionType)">
            <summary>
            关闭事务
            </summary>
            <param name="closeTransactionType"></param>
        </member>
        <member name="M:Safe.Base.DbHelper.MYSQLHelper.CreateCommand(System.String,System.Data.CommandType,System.Boolean,System.Boolean,System.Data.IDataParameter[])">
            <summary>
            初始化查询对象
            </summary>
            <param name="cmdText">查询语句</param>
            <param name="cmdType">类型</param>
            <param name="addReturnValuePar">是否要添加一个返回值参数</param>
            <param name="addDefalutOutPar">是否要添加默认的OUT参数</param>
            <param name="sqlpars">参数集</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.DbHelper.MYSQLHelper.StartConnection(System.Boolean)">
            <summary>
            开始一个连接
            </summary>
            <param name="withSqlTransaction">是否开启事务</param>
        </member>
        <member name="M:Safe.Base.DbHelper.MYSQLHelper.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="connString">连接字串</param>
            <param name="canSetHandClose">是否允许设置成手动关闭连接</param>
        </member>
        <member name="M:Safe.Base.DbHelper.ConnEncrypt.DecryptFile(System.String)">
            <summary>
            从文件中读取信息，并解密
            </summary>
            <param name="fileFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.DbHelper.ConnEncrypt.RC4Encrypt(System.Byte[],System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.DbHelper.ConnEncrypt.GetKey(System.Byte[],System.Int32)">
            <summary>
            打乱密码
            </summary>
            <param name="pass">密码</param>
            <param name="kLen">密码箱长度</param>
            <returns>打乱后的密码</returns>
        </member>
        <member name="M:Safe.Base.DbHelper.SimplePager.GetPagerSQL(System.Int32,System.Int32,System.String,System.String,Safe.Base.Contract.SimplePager_Order)">
            <summary>
            取分页SQL语句
            </summary>
            <param name="pageindex">从1开始的页码</param>
            <param name="pagesize">每页显示的记录数</param>
            <param name="fields"></param>
            <param name="where">要包含WHERE</param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.DbHelper.SimplePager.GetCountSQL(System.String)">
            <summary>
            要包含WHERE
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="T:Safe.Base.DbHelper.Helper.SimpleComandTextCreater">
            <summary>
            创建查询语句
            </summary>
        </member>
        <member name="M:Safe.Base.DbHelper.Helper.SimpleComandTextCreater.CreateInsertCmdText(System.String,System.Collections.Generic.IEnumerable{Safe.Base.DbHelper.Helper.AbsCPar},System.Collections.Generic.IList{System.Data.IDataParameter}@)">
            <summary>
            创建简单Insert 的 T-SQL语句
            </summary>
            <param name="obj"></param>
            <param name="Pars"></param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.DbHelper.Helper.SimpleComandTextCreater.CreateSelectCmdText(System.String,System.String,System.Collections.Generic.IList{System.Data.IDataParameter}@,System.String,Safe.Base.DbHelper.Helper.AbsCPar[])">
            <summary>
            根据传入的条件，创建查询列表的语句， 只支持AND连接
            </summary>
            <param name="tableName"></param>
            <param name="serachField"></param>
            <param name="pars"></param>
            <param name="orderby">可以不写 order by</param>
            <param name="keyValue"></param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.DbHelper.Helper.SimpleComandTextCreater.CreateDeleteCmdText(System.String,System.Collections.Generic.IList{System.Data.IDataParameter}@,Safe.Base.DbHelper.Helper.AbsCPar[])">
            <summary>
            根据传入的条件，创建删除语句
            </summary>
            <param name="tableName"></param>
            <param name="serachField"></param>
            <param name="pars"></param>
            <param name="keyValue"></param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.DbHelper.Helper.SimpleComandTextCreater.CreateUpdateCmdText(System.String,Safe.Base.DbHelper.Helper.AbsCPar[],System.Collections.Generic.IList{System.Data.IDataParameter}@,Safe.Base.DbHelper.Helper.AbsCPar[])">
            <summary>
            传入数据，创建更新语句
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.DbHelper.Helper.SimpleComandTextCreater.CreateUpdateCmdText(System.String,Safe.Base.DbHelper.Helper.AbsCPar[],System.Text.StringBuilder@,System.Collections.Generic.IList{System.Data.IDataParameter}@,Safe.Base.DbHelper.Helper.AbsCPar[])">
            <summary>
            传入数据，创建更新语句
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:Safe.Base.DbHelper.SQLHelper._commandTimeout">
            <summary>
            命令的超时时间
            </summary>
        </member>
        <member name="F:Safe.Base.DbHelper.SQLHelper._connString">
            <summary>
            连接字串
            </summary>
        </member>
        <member name="F:Safe.Base.DbHelper.SQLHelper._conn">
            <summary>
            连接对象
            </summary>
        </member>
        <member name="F:Safe.Base.DbHelper.SQLHelper._dbTran">
            <summary>
            事务
            </summary>
        </member>
        <member name="F:Safe.Base.DbHelper.SQLHelper._isErr">
            <summary>
            在事务执行过程中,是否出现异常
            </summary>
        </member>
        <member name="F:Safe.Base.DbHelper.SQLHelper._canSetHandClose">
            <summary>
            能否设置手动关闭连接
            </summary>
        </member>
        <member name="F:Safe.Base.DbHelper.SQLHelper._autoClose">
            <summary>
            是否自动关闭连接
            </summary>
        </member>
        <member name="F:Safe.Base.DbHelper.SQLHelper._openTranWhenHandClose">
            <summary>
            手动关闭连接的情况下,是否需要开启数据库事务
            </summary>
        </member>
        <member name="M:Safe.Base.DbHelper.SQLHelper.TryEndConnection">
            <summary>
            尝试关闭连接,如果服务器有设置自动关闭,就自动关闭
            </summary>
        </member>
        <member name="M:Safe.Base.DbHelper.SQLHelper.CloseTransaction(Safe.Base.Contract.ECloseTransactionType)">
            <summary>
            关闭事务
            </summary>
            <param name="closeTransactionType"></param>
        </member>
        <member name="M:Safe.Base.DbHelper.SQLHelper.CreateCommand(System.String,System.Data.CommandType,System.Boolean,System.Boolean,System.Data.IDataParameter[])">
            <summary>
            初始化查询对象
            </summary>
            <param name="cmdText">查询语句</param>
            <param name="cmdType">类型</param>
            <param name="addReturnValuePar">是否要添加一个返回值参数</param>
            <param name="addDefalutOutPar">是否要添加默认的OUT参数</param>
            <param name="sqlpars">参数集</param>
            <returns></returns>
        </member>
        <member name="M:Safe.Base.DbHelper.SQLHelper.StartConnection(System.Boolean)">
            <summary>
            开始一个连接
            </summary>
            <param name="withSqlTransaction">是否开启事务</param>
        </member>
        <member name="M:Safe.Base.DbHelper.SQLHelper.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="connString">连接字串</param>
            <param name="canSetHandClose">是否允许设置成手动关闭连接</param>
        </member>
        <member name="M:Safe.Base.DbHelper.SQLHelper.FromFile(System.String,System.Boolean)">
            <summary>
            从文件中读取连接字符串
            </summary>
            <param name="fileFullName"></param>
            <param name="canSetHandClose"></param>
            <returns></returns>
        </member>
    </members>
</doc>
